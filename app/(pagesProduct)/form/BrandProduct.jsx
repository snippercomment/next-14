"use client";
import { useBrands } from "@/lib/firestore/brands/read";
import { usePathname, useRouter } from "next/navigation";

export default function BrandProduct({ selectedBrand, onBrandChange }) {
    // L·∫•y d·ªØ li·ªáu brands t·ª´ Firestore nh∆∞ trong admin
    const { data: brands } = useBrands();

    // L·∫•y pathname v√† router ƒë·ªÉ navigation
    const pathname = usePathname();
    const router = useRouter();

    // DEBUG: Log ƒë·ªÉ ki·ªÉm tra
    console.log('Current pathname:', pathname);
    console.log('All brands:', brands);

    // X√°c ƒë·ªãnh category d·ª±a tr√™n pathname
    const getCurrentCategory = () => {
        if (pathname.includes('/iphone')) return 'iphone';
        if (pathname.includes('/laptop')) return 'laptop';
        if (pathname.includes('/mouse')) return 'mouse';
        if (pathname.includes('/headphone')) return 'headphone';
        return null;
    };

    const currentCategory = getCurrentCategory();
    console.log('Current category:', currentCategory);

    // L·ªçc brands theo category hi·ªán t·∫°i
    const filteredBrands = brands?.filter(brand => {
        console.log(`Brand: ${brand.name}, Category: ${brand.category}, Status: ${brand.status}`);
        // Ch·ªâ l·ªçc theo category, b·ªè qua status v√¨ status undefined
        return brand.category === currentCategory;
    }) || [];

    console.log('Filtered brands:', filteredBrands);

    // Fallback emoji cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ·∫£nh
    const fallbackLogos = {
        // iPhone brands
        'Apple': 'üçé',
        'iPhone': 'üçé',

        // Laptop brands
        'Dell': 'üíª',
        'HP': 'üñ•Ô∏è',
        'Lenovo': '‚ö°',
        'Asus': 'üéÆ',
        'Acer': 'üíª',
        'MSI': 'üéÆ',
        'MacBook': 'üçé',
        'Thinkpad': 'üñ§',

        // Accessory brands
        'Anker': 'üîå',
        'Belkin': 'üîå',
        'Logitech': 'üñ±Ô∏è',
        'SanDisk': 'üíæ',
        'Samsung': 'üì±',
        'Xiaomi': 'üî•',
        'Ugreen': 'üîå',
        'Baseus': '‚ö°'
    };

    // Handle brand click - navigate ƒë·∫øn trang brand
    const handleBrandClick = (brandId, brandName) => {
        // Navigate ƒë·∫øn trang brand v·ªõi URL parameter
        const basePath = pathname.split('?')[0]; // Remove query params
        const brandQuery = `?brand=${brandId}&name=${encodeURIComponent(brandName)}`;
        router.push(`${basePath}${brandQuery}`);

        // C≈©ng update state n·∫øu c√≥ onBrandChange
        if (onBrandChange) {
            onBrandChange(brandId);
        }
    };

    // Handle "T·∫•t c·∫£" click
    const handleAllBrandsClick = () => {
        // Remove brand query param
        const basePath = pathname.split('?')[0];
        router.push(basePath);

        // Reset filter
        if (onBrandChange) {
            onBrandChange('');
        }
    };

    // N·∫øu kh√¥ng c√≥ category ph√π h·ª£p, kh√¥ng hi·ªÉn th·ªã g√¨
    if (!currentCategory) {
        return null;
    }

    return (
        <div className="flex gap-2 overflow-x-auto pb-2">
            {/* N√∫t T·∫•t c·∫£ */}
            <button
                onClick={handleAllBrandsClick}
                className={`px-6 py-3 rounded-full whitespace-nowrap font-medium border-2 transition-colors ${selectedBrand === ''
                        ? 'bg-blue-500 text-white border-blue-500'
                        : 'bg-white text-gray-700 border-gray-200 hover:border-blue-300'
                    }`}
            >
                T·∫•t c·∫£
            </button>

            {/* Danh s√°ch brands ƒë∆∞·ª£c l·ªçc theo category */}
            {filteredBrands.map((brand) => (
                <button
                    key={brand.id}
                    onClick={() => handleBrandClick(brand.id, brand.name)}
                    className={`px-6 py-3 rounded-full whitespace-nowrap font-medium border-2 transition-colors flex items-center gap-2 ${selectedBrand === brand.id
                            ? 'bg-blue-500 text-white border-blue-500'
                            : 'bg-white text-gray-700 border-gray-200 hover:border-blue-300'
                        }`}
                >
                    {/* Logo th∆∞∆°ng hi·ªáu - ∆∞u ti√™n ·∫£nh t·ª´ database */}
                    {brand.imageURL ? (
                        <img
                            src={brand.imageURL}
                            alt={brand.name}
                            className="w-8 h-8 object-contain rounded"
                        />
                    ) : (
                        <span className="text-lg">
                            {fallbackLogos[brand.name] || 'üè∑Ô∏è'}
                        </span>
                    )}

                    {/* T√™n th∆∞∆°ng hi·ªáu */}
                    <span>{brand.name}</span>
                </button>
            ))}
        </div>
    );
}